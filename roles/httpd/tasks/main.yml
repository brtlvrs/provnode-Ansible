---
# role: httpd

#-- 
- name: display custom variables
  #-- debug task to display custom created variables
  tags:
  - always
  debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
  - _obj
  - gv
  - httpd

- name: "find container: {{httpd.container.name}}"
  #-- Check if Folding@Home container exists
  tags:
    - run
    - never #only run task when tags are explicity given 
    - rm_container
    - rm_image
    - build
    - stop
    - archive
  community.docker.docker_container_info:
    name: "{{httpd.container.name}}"
  register: httpd_container

- name: "stop container: {{httpd.container.name}}"
  tags:
    - never #only run task when tags are explicity given 
    - rm_container
    - rm_image
    - build
    - run
    - stop
    - archive
  community.docker.docker_container:
    name: "{{httpd.container.name}}"
    state: stopped
  when: httpd_container.exists

- name: "remove container: {{httpd.container.name}}"
  tags:
    - never #only run task when tags are explicity given 
    - rm_container
    - rm_image
    - run
    - build
    - archive
  when: httpd_container.exists
  community.docker.docker_container:
    name: "{{httpd.container.name}}"
    state: absent

- name: "remove docker image: {{httpd.image.name}}:{{httpd.image.tag}}" 
  tags:
    - never #only run task when tags are explicity given 
    - rm_image
    - build
    - run
    - archive
  community.docker.docker_image:
    name: "{{httpd.image.name}}" 
    tag: "{{httpd.image.tag}}" 
    state: absent


- name: check build folder
  tags:
    - never
    - build
    - run 
    - archive
  file:
    path: "{{httpd.image.build.path}}"
    state: directory
    mode: '0755'


- name: bugfix 'invalid selinux context'
  tags:
    - build
    - run
    - archive
    - never
  file:
    path:  "{{httpd.image.build.path}}/{{item}}"
    state: touch
  loop:
    - dockerfile

- name: templating build content
  tags:
    - build
    - run
    - archive
    - never
  template:
    src: "{{item}}.j2"
    dest: "{{httpd.image.build.path}}/{{item}}"
  loop:
    - dockerfile

- name: "build docker image: {{httpd.image.name}}:{{httpd.image.tag}}" 
  tags:
    - build
    - run
    - archive
    - never
  community.docker.docker_image:
    build:
      pull: "false"
      path: "{{httpd.image.build.path}}"
    source: build
    name: "{{httpd.image.name}}" 
    tag: "{{httpd.image.tag}}" 
    push: false

- name: "run container" 
  tags:
    - never
    - run_only
    - run
  community.docker.docker_container:
    name: "{{httpd.container.name}}"
    image: "{{httpd.image.name}}:{{httpd.image.tag}}"
    hostname: "{{_obj.name}}"
    domainname: "{{gv.domain}}"
    state: started
    recreate: yes
    container_default_behavior: no_defaults
    detach: yes
    cleanup: yes
    network_mode: "{{gv.networks.proxy.name}}"
    networks:
    - name: "{{gv.networks.proxy.name}}"
    purge_networks: true
    restart_policy: "unless-stopped"
    labels:
      "traefik.enable" : "true"
      "traefik.docker.network": "proxy"    
      #-- http site
      "traefik.http.routers.rtr_apache.entrypoints": "web"
      "traefik.http.routers.rtr_apache.rule": "Host(`lab.brtlvrs.lab`)"
      "traefik.http.routers.rtr_apache.service": "svc_apache"
      "traefik.http.services.svc_apache.loadbalancer.server.port": "80" 
      "traefik.http.routers.rtr_apache_conf.entrypoints": "web"
      #-- webproc site
      "traefik.http.routers.rtr_apache_conf.rule": "Host(`lab.brtlvrs.lab`) && path(`/mgt`)"
      "traefik.http.routers.rtr_apache_conf.service": "svc_apache_conf"
      "traefik.http.routers.rtr_apache_conf.middlewares": "mw_apache_conf_01"
      "traefik.http.middlewares.mw_apache_conf_01.stripprefix.prefixes":  "/mgt"
      "traefik.http.services.svc_apache_conf.loadbalancer.server.port": "8080"

    volumes:
      - "{{gv.projectlocation}}/httpd/httpd.conf:/usr/local/apache2/conf/httpd.conf"
    volumes_from:
      - "{{gv.shareddata.name}}"


- name: help
  tags:
    - help
    - never
  debug:
    var:
      help
